/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta2

import (
	v1beta2 "github.com/longhorn/longhorn-manager/k8s/pkg/apis/longhorn/v1beta2"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// UpgradeLister helps list Upgrades.
type UpgradeLister interface {
	// List lists all Upgrades in the indexer.
	List(selector labels.Selector) (ret []*v1beta2.Upgrade, err error)
	// Upgrades returns an object that can list and get Upgrades.
	Upgrades(namespace string) UpgradeNamespaceLister
	UpgradeListerExpansion
}

// upgradeLister implements the UpgradeLister interface.
type upgradeLister struct {
	indexer cache.Indexer
}

// NewUpgradeLister returns a new UpgradeLister.
func NewUpgradeLister(indexer cache.Indexer) UpgradeLister {
	return &upgradeLister{indexer: indexer}
}

// List lists all Upgrades in the indexer.
func (s *upgradeLister) List(selector labels.Selector) (ret []*v1beta2.Upgrade, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta2.Upgrade))
	})
	return ret, err
}

// Upgrades returns an object that can list and get Upgrades.
func (s *upgradeLister) Upgrades(namespace string) UpgradeNamespaceLister {
	return upgradeNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// UpgradeNamespaceLister helps list and get Upgrades.
type UpgradeNamespaceLister interface {
	// List lists all Upgrades in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1beta2.Upgrade, err error)
	// Get retrieves the Upgrade from the indexer for a given namespace and name.
	Get(name string) (*v1beta2.Upgrade, error)
	UpgradeNamespaceListerExpansion
}

// upgradeNamespaceLister implements the UpgradeNamespaceLister
// interface.
type upgradeNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Upgrades in the indexer for a given namespace.
func (s upgradeNamespaceLister) List(selector labels.Selector) (ret []*v1beta2.Upgrade, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta2.Upgrade))
	})
	return ret, err
}

// Get retrieves the Upgrade from the indexer for a given namespace and name.
func (s upgradeNamespaceLister) Get(name string) (*v1beta2.Upgrade, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta2.Resource("upgrade"), name)
	}
	return obj.(*v1beta2.Upgrade), nil
}
