/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta2

import (
	v1beta2 "github.com/longhorn/longhorn-manager/k8s/pkg/apis/longhorn/v1beta2"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DataEngineUpgradeManagerLister helps list DataEngineUpgradeManagers.
type DataEngineUpgradeManagerLister interface {
	// List lists all DataEngineUpgradeManagers in the indexer.
	List(selector labels.Selector) (ret []*v1beta2.DataEngineUpgradeManager, err error)
	// DataEngineUpgradeManagers returns an object that can list and get DataEngineUpgradeManagers.
	DataEngineUpgradeManagers(namespace string) DataEngineUpgradeManagerNamespaceLister
	DataEngineUpgradeManagerListerExpansion
}

// dataEngineUpgradeManagerLister implements the DataEngineUpgradeManagerLister interface.
type dataEngineUpgradeManagerLister struct {
	indexer cache.Indexer
}

// NewDataEngineUpgradeManagerLister returns a new DataEngineUpgradeManagerLister.
func NewDataEngineUpgradeManagerLister(indexer cache.Indexer) DataEngineUpgradeManagerLister {
	return &dataEngineUpgradeManagerLister{indexer: indexer}
}

// List lists all DataEngineUpgradeManagers in the indexer.
func (s *dataEngineUpgradeManagerLister) List(selector labels.Selector) (ret []*v1beta2.DataEngineUpgradeManager, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta2.DataEngineUpgradeManager))
	})
	return ret, err
}

// DataEngineUpgradeManagers returns an object that can list and get DataEngineUpgradeManagers.
func (s *dataEngineUpgradeManagerLister) DataEngineUpgradeManagers(namespace string) DataEngineUpgradeManagerNamespaceLister {
	return dataEngineUpgradeManagerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DataEngineUpgradeManagerNamespaceLister helps list and get DataEngineUpgradeManagers.
type DataEngineUpgradeManagerNamespaceLister interface {
	// List lists all DataEngineUpgradeManagers in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1beta2.DataEngineUpgradeManager, err error)
	// Get retrieves the DataEngineUpgradeManager from the indexer for a given namespace and name.
	Get(name string) (*v1beta2.DataEngineUpgradeManager, error)
	DataEngineUpgradeManagerNamespaceListerExpansion
}

// dataEngineUpgradeManagerNamespaceLister implements the DataEngineUpgradeManagerNamespaceLister
// interface.
type dataEngineUpgradeManagerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DataEngineUpgradeManagers in the indexer for a given namespace.
func (s dataEngineUpgradeManagerNamespaceLister) List(selector labels.Selector) (ret []*v1beta2.DataEngineUpgradeManager, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta2.DataEngineUpgradeManager))
	})
	return ret, err
}

// Get retrieves the DataEngineUpgradeManager from the indexer for a given namespace and name.
func (s dataEngineUpgradeManagerNamespaceLister) Get(name string) (*v1beta2.DataEngineUpgradeManager, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta2.Resource("dataengineupgrademanager"), name)
	}
	return obj.(*v1beta2.DataEngineUpgradeManager), nil
}
