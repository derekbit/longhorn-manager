// Code generated by protoc-gen-go. DO NOT EDIT.
// source: instance.proto

package imrpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ProcessSpecific struct {
	Binary               string   `protobuf:"bytes,1,opt,name=binary,proto3" json:"binary,omitempty"`
	Args                 []string `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProcessSpecific) Reset()         { *m = ProcessSpecific{} }
func (m *ProcessSpecific) String() string { return proto.CompactTextString(m) }
func (*ProcessSpecific) ProtoMessage()    {}
func (*ProcessSpecific) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd22322185b2070b, []int{0}
}

func (m *ProcessSpecific) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProcessSpecific.Unmarshal(m, b)
}
func (m *ProcessSpecific) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProcessSpecific.Marshal(b, m, deterministic)
}
func (m *ProcessSpecific) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessSpecific.Merge(m, src)
}
func (m *ProcessSpecific) XXX_Size() int {
	return xxx_messageInfo_ProcessSpecific.Size(m)
}
func (m *ProcessSpecific) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessSpecific.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessSpecific proto.InternalMessageInfo

func (m *ProcessSpecific) GetBinary() string {
	if m != nil {
		return m.Binary
	}
	return ""
}

func (m *ProcessSpecific) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

type SpdkSpecific struct {
	Address              string            `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	ReplicaAddressMap    map[string]string `protobuf:"bytes,2,rep,name=replica_address_map,json=replicaAddressMap,proto3" json:"replica_address_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DiskName             string            `protobuf:"bytes,3,opt,name=disk_name,json=diskName,proto3" json:"disk_name,omitempty"`
	DiskUuid             string            `protobuf:"bytes,4,opt,name=disk_uuid,json=diskUuid,proto3" json:"disk_uuid,omitempty"`
	Size                 uint64            `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`
	ExposeRequired       bool              `protobuf:"varint,6,opt,name=expose_required,json=exposeRequired,proto3" json:"expose_required,omitempty"`
	Frontend             string            `protobuf:"bytes,7,opt,name=frontend,proto3" json:"frontend,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *SpdkSpecific) Reset()         { *m = SpdkSpecific{} }
func (m *SpdkSpecific) String() string { return proto.CompactTextString(m) }
func (*SpdkSpecific) ProtoMessage()    {}
func (*SpdkSpecific) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd22322185b2070b, []int{1}
}

func (m *SpdkSpecific) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SpdkSpecific.Unmarshal(m, b)
}
func (m *SpdkSpecific) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SpdkSpecific.Marshal(b, m, deterministic)
}
func (m *SpdkSpecific) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpdkSpecific.Merge(m, src)
}
func (m *SpdkSpecific) XXX_Size() int {
	return xxx_messageInfo_SpdkSpecific.Size(m)
}
func (m *SpdkSpecific) XXX_DiscardUnknown() {
	xxx_messageInfo_SpdkSpecific.DiscardUnknown(m)
}

var xxx_messageInfo_SpdkSpecific proto.InternalMessageInfo

func (m *SpdkSpecific) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *SpdkSpecific) GetReplicaAddressMap() map[string]string {
	if m != nil {
		return m.ReplicaAddressMap
	}
	return nil
}

func (m *SpdkSpecific) GetDiskName() string {
	if m != nil {
		return m.DiskName
	}
	return ""
}

func (m *SpdkSpecific) GetDiskUuid() string {
	if m != nil {
		return m.DiskUuid
	}
	return ""
}

func (m *SpdkSpecific) GetSize() uint64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *SpdkSpecific) GetExposeRequired() bool {
	if m != nil {
		return m.ExposeRequired
	}
	return false
}

func (m *SpdkSpecific) GetFrontend() string {
	if m != nil {
		return m.Frontend
	}
	return ""
}

type InstanceSpec struct {
	BackendStoreDriver   BackendStoreDriver `protobuf:"varint,1,opt,name=backend_store_driver,json=backendStoreDriver,proto3,enum=imrpc.BackendStoreDriver" json:"backend_store_driver,omitempty"`
	Name                 string             `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type                 string             `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	VolumeName           string             `protobuf:"bytes,4,opt,name=volume_name,json=volumeName,proto3" json:"volume_name,omitempty"`
	PortCount            int32              `protobuf:"varint,5,opt,name=port_count,json=portCount,proto3" json:"port_count,omitempty"`
	PortArgs             []string           `protobuf:"bytes,6,rep,name=port_args,json=portArgs,proto3" json:"port_args,omitempty"`
	ProcessSpecific      *ProcessSpecific   `protobuf:"bytes,7,opt,name=process_specific,json=processSpecific,proto3" json:"process_specific,omitempty"`
	SpdkSpecific         *SpdkSpecific      `protobuf:"bytes,8,opt,name=spdk_specific,json=spdkSpecific,proto3" json:"spdk_specific,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *InstanceSpec) Reset()         { *m = InstanceSpec{} }
func (m *InstanceSpec) String() string { return proto.CompactTextString(m) }
func (*InstanceSpec) ProtoMessage()    {}
func (*InstanceSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd22322185b2070b, []int{2}
}

func (m *InstanceSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstanceSpec.Unmarshal(m, b)
}
func (m *InstanceSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstanceSpec.Marshal(b, m, deterministic)
}
func (m *InstanceSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstanceSpec.Merge(m, src)
}
func (m *InstanceSpec) XXX_Size() int {
	return xxx_messageInfo_InstanceSpec.Size(m)
}
func (m *InstanceSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_InstanceSpec.DiscardUnknown(m)
}

var xxx_messageInfo_InstanceSpec proto.InternalMessageInfo

func (m *InstanceSpec) GetBackendStoreDriver() BackendStoreDriver {
	if m != nil {
		return m.BackendStoreDriver
	}
	return BackendStoreDriver_longhorn
}

func (m *InstanceSpec) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *InstanceSpec) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *InstanceSpec) GetVolumeName() string {
	if m != nil {
		return m.VolumeName
	}
	return ""
}

func (m *InstanceSpec) GetPortCount() int32 {
	if m != nil {
		return m.PortCount
	}
	return 0
}

func (m *InstanceSpec) GetPortArgs() []string {
	if m != nil {
		return m.PortArgs
	}
	return nil
}

func (m *InstanceSpec) GetProcessSpecific() *ProcessSpecific {
	if m != nil {
		return m.ProcessSpecific
	}
	return nil
}

func (m *InstanceSpec) GetSpdkSpecific() *SpdkSpecific {
	if m != nil {
		return m.SpdkSpecific
	}
	return nil
}

type InstanceStatus struct {
	State                string   `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	ErrorMsg             string   `protobuf:"bytes,2,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
	PortStart            int32    `protobuf:"varint,3,opt,name=port_start,json=portStart,proto3" json:"port_start,omitempty"`
	PortEnd              int32    `protobuf:"varint,4,opt,name=port_end,json=portEnd,proto3" json:"port_end,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InstanceStatus) Reset()         { *m = InstanceStatus{} }
func (m *InstanceStatus) String() string { return proto.CompactTextString(m) }
func (*InstanceStatus) ProtoMessage()    {}
func (*InstanceStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd22322185b2070b, []int{3}
}

func (m *InstanceStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstanceStatus.Unmarshal(m, b)
}
func (m *InstanceStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstanceStatus.Marshal(b, m, deterministic)
}
func (m *InstanceStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstanceStatus.Merge(m, src)
}
func (m *InstanceStatus) XXX_Size() int {
	return xxx_messageInfo_InstanceStatus.Size(m)
}
func (m *InstanceStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_InstanceStatus.DiscardUnknown(m)
}

var xxx_messageInfo_InstanceStatus proto.InternalMessageInfo

func (m *InstanceStatus) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *InstanceStatus) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

func (m *InstanceStatus) GetPortStart() int32 {
	if m != nil {
		return m.PortStart
	}
	return 0
}

func (m *InstanceStatus) GetPortEnd() int32 {
	if m != nil {
		return m.PortEnd
	}
	return 0
}

type InstanceCreateRequest struct {
	Spec                 *InstanceSpec `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *InstanceCreateRequest) Reset()         { *m = InstanceCreateRequest{} }
func (m *InstanceCreateRequest) String() string { return proto.CompactTextString(m) }
func (*InstanceCreateRequest) ProtoMessage()    {}
func (*InstanceCreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd22322185b2070b, []int{4}
}

func (m *InstanceCreateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstanceCreateRequest.Unmarshal(m, b)
}
func (m *InstanceCreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstanceCreateRequest.Marshal(b, m, deterministic)
}
func (m *InstanceCreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstanceCreateRequest.Merge(m, src)
}
func (m *InstanceCreateRequest) XXX_Size() int {
	return xxx_messageInfo_InstanceCreateRequest.Size(m)
}
func (m *InstanceCreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InstanceCreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InstanceCreateRequest proto.InternalMessageInfo

func (m *InstanceCreateRequest) GetSpec() *InstanceSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

type InstanceDeleteRequest struct {
	BackendStoreDriver   BackendStoreDriver `protobuf:"varint,1,opt,name=backend_store_driver,json=backendStoreDriver,proto3,enum=imrpc.BackendStoreDriver" json:"backend_store_driver,omitempty"`
	Name                 string             `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type                 string             `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	DiskUuid             string             `protobuf:"bytes,4,opt,name=disk_uuid,json=diskUuid,proto3" json:"disk_uuid,omitempty"`
	CleanupRequired      bool               `protobuf:"varint,5,opt,name=cleanup_required,json=cleanupRequired,proto3" json:"cleanup_required,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *InstanceDeleteRequest) Reset()         { *m = InstanceDeleteRequest{} }
func (m *InstanceDeleteRequest) String() string { return proto.CompactTextString(m) }
func (*InstanceDeleteRequest) ProtoMessage()    {}
func (*InstanceDeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd22322185b2070b, []int{5}
}

func (m *InstanceDeleteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstanceDeleteRequest.Unmarshal(m, b)
}
func (m *InstanceDeleteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstanceDeleteRequest.Marshal(b, m, deterministic)
}
func (m *InstanceDeleteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstanceDeleteRequest.Merge(m, src)
}
func (m *InstanceDeleteRequest) XXX_Size() int {
	return xxx_messageInfo_InstanceDeleteRequest.Size(m)
}
func (m *InstanceDeleteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InstanceDeleteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InstanceDeleteRequest proto.InternalMessageInfo

func (m *InstanceDeleteRequest) GetBackendStoreDriver() BackendStoreDriver {
	if m != nil {
		return m.BackendStoreDriver
	}
	return BackendStoreDriver_longhorn
}

func (m *InstanceDeleteRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *InstanceDeleteRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *InstanceDeleteRequest) GetDiskUuid() string {
	if m != nil {
		return m.DiskUuid
	}
	return ""
}

func (m *InstanceDeleteRequest) GetCleanupRequired() bool {
	if m != nil {
		return m.CleanupRequired
	}
	return false
}

type InstanceGetRequest struct {
	BackendStoreDriver   BackendStoreDriver `protobuf:"varint,1,opt,name=backend_store_driver,json=backendStoreDriver,proto3,enum=imrpc.BackendStoreDriver" json:"backend_store_driver,omitempty"`
	Name                 string             `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type                 string             `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	DiskUuid             string             `protobuf:"bytes,4,opt,name=disk_uuid,json=diskUuid,proto3" json:"disk_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *InstanceGetRequest) Reset()         { *m = InstanceGetRequest{} }
func (m *InstanceGetRequest) String() string { return proto.CompactTextString(m) }
func (*InstanceGetRequest) ProtoMessage()    {}
func (*InstanceGetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd22322185b2070b, []int{6}
}

func (m *InstanceGetRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstanceGetRequest.Unmarshal(m, b)
}
func (m *InstanceGetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstanceGetRequest.Marshal(b, m, deterministic)
}
func (m *InstanceGetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstanceGetRequest.Merge(m, src)
}
func (m *InstanceGetRequest) XXX_Size() int {
	return xxx_messageInfo_InstanceGetRequest.Size(m)
}
func (m *InstanceGetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InstanceGetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InstanceGetRequest proto.InternalMessageInfo

func (m *InstanceGetRequest) GetBackendStoreDriver() BackendStoreDriver {
	if m != nil {
		return m.BackendStoreDriver
	}
	return BackendStoreDriver_longhorn
}

func (m *InstanceGetRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *InstanceGetRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *InstanceGetRequest) GetDiskUuid() string {
	if m != nil {
		return m.DiskUuid
	}
	return ""
}

type InstanceResponse struct {
	Spec                 *InstanceSpec   `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
	Status               *InstanceStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Deleted              bool            `protobuf:"varint,3,opt,name=deleted,proto3" json:"deleted,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *InstanceResponse) Reset()         { *m = InstanceResponse{} }
func (m *InstanceResponse) String() string { return proto.CompactTextString(m) }
func (*InstanceResponse) ProtoMessage()    {}
func (*InstanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd22322185b2070b, []int{7}
}

func (m *InstanceResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstanceResponse.Unmarshal(m, b)
}
func (m *InstanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstanceResponse.Marshal(b, m, deterministic)
}
func (m *InstanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstanceResponse.Merge(m, src)
}
func (m *InstanceResponse) XXX_Size() int {
	return xxx_messageInfo_InstanceResponse.Size(m)
}
func (m *InstanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_InstanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_InstanceResponse proto.InternalMessageInfo

func (m *InstanceResponse) GetSpec() *InstanceSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *InstanceResponse) GetStatus() *InstanceStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *InstanceResponse) GetDeleted() bool {
	if m != nil {
		return m.Deleted
	}
	return false
}

type InstanceListResponse struct {
	Instances            map[string]*InstanceResponse `protobuf:"bytes,1,rep,name=instances,proto3" json:"instances,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *InstanceListResponse) Reset()         { *m = InstanceListResponse{} }
func (m *InstanceListResponse) String() string { return proto.CompactTextString(m) }
func (*InstanceListResponse) ProtoMessage()    {}
func (*InstanceListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd22322185b2070b, []int{8}
}

func (m *InstanceListResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstanceListResponse.Unmarshal(m, b)
}
func (m *InstanceListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstanceListResponse.Marshal(b, m, deterministic)
}
func (m *InstanceListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstanceListResponse.Merge(m, src)
}
func (m *InstanceListResponse) XXX_Size() int {
	return xxx_messageInfo_InstanceListResponse.Size(m)
}
func (m *InstanceListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_InstanceListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_InstanceListResponse proto.InternalMessageInfo

func (m *InstanceListResponse) GetInstances() map[string]*InstanceResponse {
	if m != nil {
		return m.Instances
	}
	return nil
}

type InstanceLogRequest struct {
	BackendStoreDriver   BackendStoreDriver `protobuf:"varint,1,opt,name=backend_store_driver,json=backendStoreDriver,proto3,enum=imrpc.BackendStoreDriver" json:"backend_store_driver,omitempty"`
	Name                 string             `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type                 string             `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *InstanceLogRequest) Reset()         { *m = InstanceLogRequest{} }
func (m *InstanceLogRequest) String() string { return proto.CompactTextString(m) }
func (*InstanceLogRequest) ProtoMessage()    {}
func (*InstanceLogRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd22322185b2070b, []int{9}
}

func (m *InstanceLogRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstanceLogRequest.Unmarshal(m, b)
}
func (m *InstanceLogRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstanceLogRequest.Marshal(b, m, deterministic)
}
func (m *InstanceLogRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstanceLogRequest.Merge(m, src)
}
func (m *InstanceLogRequest) XXX_Size() int {
	return xxx_messageInfo_InstanceLogRequest.Size(m)
}
func (m *InstanceLogRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InstanceLogRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InstanceLogRequest proto.InternalMessageInfo

func (m *InstanceLogRequest) GetBackendStoreDriver() BackendStoreDriver {
	if m != nil {
		return m.BackendStoreDriver
	}
	return BackendStoreDriver_longhorn
}

func (m *InstanceLogRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *InstanceLogRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type InstanceReplaceRequest struct {
	Spec                 *InstanceSpec `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
	TerminateSignal      string        `protobuf:"bytes,2,opt,name=terminate_signal,json=terminateSignal,proto3" json:"terminate_signal,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *InstanceReplaceRequest) Reset()         { *m = InstanceReplaceRequest{} }
func (m *InstanceReplaceRequest) String() string { return proto.CompactTextString(m) }
func (*InstanceReplaceRequest) ProtoMessage()    {}
func (*InstanceReplaceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd22322185b2070b, []int{10}
}

func (m *InstanceReplaceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstanceReplaceRequest.Unmarshal(m, b)
}
func (m *InstanceReplaceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstanceReplaceRequest.Marshal(b, m, deterministic)
}
func (m *InstanceReplaceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstanceReplaceRequest.Merge(m, src)
}
func (m *InstanceReplaceRequest) XXX_Size() int {
	return xxx_messageInfo_InstanceReplaceRequest.Size(m)
}
func (m *InstanceReplaceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InstanceReplaceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InstanceReplaceRequest proto.InternalMessageInfo

func (m *InstanceReplaceRequest) GetSpec() *InstanceSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *InstanceReplaceRequest) GetTerminateSignal() string {
	if m != nil {
		return m.TerminateSignal
	}
	return ""
}

func init() {
	proto.RegisterType((*ProcessSpecific)(nil), "imrpc.ProcessSpecific")
	proto.RegisterType((*SpdkSpecific)(nil), "imrpc.SpdkSpecific")
	proto.RegisterMapType((map[string]string)(nil), "imrpc.SpdkSpecific.ReplicaAddressMapEntry")
	proto.RegisterType((*InstanceSpec)(nil), "imrpc.InstanceSpec")
	proto.RegisterType((*InstanceStatus)(nil), "imrpc.InstanceStatus")
	proto.RegisterType((*InstanceCreateRequest)(nil), "imrpc.InstanceCreateRequest")
	proto.RegisterType((*InstanceDeleteRequest)(nil), "imrpc.InstanceDeleteRequest")
	proto.RegisterType((*InstanceGetRequest)(nil), "imrpc.InstanceGetRequest")
	proto.RegisterType((*InstanceResponse)(nil), "imrpc.InstanceResponse")
	proto.RegisterType((*InstanceListResponse)(nil), "imrpc.InstanceListResponse")
	proto.RegisterMapType((map[string]*InstanceResponse)(nil), "imrpc.InstanceListResponse.InstancesEntry")
	proto.RegisterType((*InstanceLogRequest)(nil), "imrpc.InstanceLogRequest")
	proto.RegisterType((*InstanceReplaceRequest)(nil), "imrpc.InstanceReplaceRequest")
}

func init() { proto.RegisterFile("instance.proto", fileDescriptor_fd22322185b2070b) }

var fileDescriptor_fd22322185b2070b = []byte{
	// 915 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0xc1, 0x6e, 0x23, 0x45,
	0x13, 0xde, 0x49, 0x6c, 0xc7, 0x2e, 0xef, 0xda, 0xf9, 0x7b, 0xb3, 0xfe, 0x1d, 0x87, 0x15, 0xd1,
	0x5c, 0x36, 0x20, 0xad, 0x17, 0x99, 0xcb, 0x0a, 0x81, 0xb4, 0x21, 0x89, 0x60, 0xb5, 0x59, 0x84,
	0xc6, 0x5a, 0x90, 0xb8, 0x8c, 0xda, 0x33, 0x15, 0xd3, 0xb2, 0x67, 0x7a, 0xe8, 0xee, 0x89, 0x08,
	0x12, 0x37, 0x2e, 0xbc, 0x08, 0xaf, 0xc0, 0x13, 0xf0, 0x06, 0x5c, 0x79, 0x17, 0xd4, 0xd5, 0x33,
	0x9e, 0x59, 0x27, 0xb6, 0xe0, 0xb4, 0xdc, 0xba, 0xbe, 0xae, 0xae, 0xae, 0xfa, 0xea, 0xeb, 0x9a,
	0x81, 0x9e, 0x48, 0xb5, 0xe1, 0x69, 0x84, 0xe3, 0x4c, 0x49, 0x23, 0x59, 0x53, 0x24, 0x2a, 0x8b,
	0x46, 0x47, 0x73, 0x29, 0xe7, 0x4b, 0x7c, 0x46, 0xe0, 0x2c, 0xbf, 0x7a, 0x86, 0x49, 0x66, 0x6e,
	0x9c, 0xcf, 0xa8, 0x27, 0x92, 0x48, 0x26, 0x89, 0x4c, 0x9d, 0xed, 0x7f, 0x06, 0xfd, 0xaf, 0x95,
	0x8c, 0x50, 0xeb, 0x69, 0x86, 0x91, 0xb8, 0x12, 0x11, 0x1b, 0x40, 0x6b, 0x26, 0x52, 0xae, 0x6e,
	0x86, 0xde, 0xb1, 0x77, 0xd2, 0x09, 0x0a, 0x8b, 0x31, 0x68, 0x70, 0x35, 0xd7, 0xc3, 0x9d, 0xe3,
	0xdd, 0x93, 0x4e, 0x40, 0x6b, 0xff, 0xaf, 0x1d, 0xb8, 0x3f, 0xcd, 0xe2, 0xc5, 0xea, 0xf0, 0x10,
	0xf6, 0x78, 0x1c, 0x2b, 0xd4, 0xba, 0x38, 0x5d, 0x9a, 0xec, 0x3b, 0x78, 0xa8, 0x30, 0x5b, 0x8a,
	0x88, 0x87, 0x05, 0x14, 0x26, 0x3c, 0xa3, 0x68, 0xdd, 0xc9, 0x87, 0x63, 0xca, 0x7d, 0x5c, 0x8f,
	0x35, 0x0e, 0x9c, 0xfb, 0xa9, 0xf3, 0x7e, 0xcd, 0xb3, 0x8b, 0xd4, 0xa8, 0x9b, 0xe0, 0x7f, 0x6a,
	0x1d, 0x67, 0x47, 0xd0, 0x89, 0x85, 0x5e, 0x84, 0x29, 0x4f, 0x70, 0xb8, 0x4b, 0xf7, 0xb6, 0x2d,
	0xf0, 0x15, 0x4f, 0x70, 0xb5, 0x99, 0xe7, 0x22, 0x1e, 0x36, 0xaa, 0xcd, 0x37, 0xb9, 0x88, 0x6d,
	0x51, 0x5a, 0xfc, 0x84, 0xc3, 0xe6, 0xb1, 0x77, 0xd2, 0x08, 0x68, 0xcd, 0x9e, 0x40, 0x1f, 0x7f,
	0xcc, 0xa4, 0xc6, 0x50, 0xe1, 0x0f, 0xb9, 0x50, 0x18, 0x0f, 0x5b, 0xc7, 0xde, 0x49, 0x3b, 0xe8,
	0x39, 0x38, 0x28, 0x50, 0x36, 0x82, 0xf6, 0x95, 0x92, 0xa9, 0xc1, 0x34, 0x1e, 0xee, 0xb9, 0xc0,
	0xa5, 0x3d, 0x3a, 0x87, 0xc1, 0xdd, 0xf9, 0xb3, 0x7d, 0xd8, 0x5d, 0x60, 0x49, 0xae, 0x5d, 0xb2,
	0x03, 0x68, 0x5e, 0xf3, 0x65, 0x8e, 0xc3, 0x1d, 0xc2, 0x9c, 0xf1, 0xc9, 0xce, 0x73, 0x8f, 0xf8,
	0x7d, 0x59, 0x74, 0xd9, 0xf2, 0xc2, 0x5e, 0xc1, 0xc1, 0x8c, 0x47, 0x0b, 0x4c, 0xe3, 0x50, 0x1b,
	0xa9, 0x30, 0x8c, 0x95, 0xb8, 0x46, 0x45, 0xd1, 0x7a, 0x93, 0xc3, 0x82, 0xc6, 0xcf, 0x9d, 0xcb,
	0xd4, 0x7a, 0x9c, 0x93, 0x43, 0xc0, 0x66, 0xb7, 0x30, 0x5b, 0x3c, 0x31, 0xe6, 0xae, 0xa5, 0xb5,
	0xc5, 0xcc, 0x4d, 0x56, 0xb2, 0x48, 0x6b, 0xf6, 0x3e, 0x74, 0xaf, 0xe5, 0x32, 0x4f, 0xd0, 0x11,
	0xec, 0x38, 0x04, 0x07, 0x11, 0xc5, 0x8f, 0x01, 0x32, 0xa9, 0x4c, 0x18, 0xc9, 0x3c, 0x35, 0xc4,
	0x65, 0x33, 0xe8, 0x58, 0xe4, 0xcc, 0x02, 0xb6, 0x03, 0xb4, 0x4d, 0xf2, 0x69, 0x91, 0x7c, 0xda,
	0x16, 0x38, 0x55, 0x73, 0xcd, 0x4e, 0x61, 0x3f, 0x73, 0x0a, 0x0c, 0x75, 0xd1, 0x79, 0x22, 0xb3,
	0x3b, 0x19, 0x14, 0xd5, 0xac, 0x09, 0x34, 0xe8, 0x67, 0x6b, 0x8a, 0x7d, 0x0e, 0x0f, 0x74, 0x16,
	0x2f, 0xaa, 0xf3, 0x6d, 0x3a, 0xff, 0xf0, 0x0e, 0x51, 0x05, 0xf7, 0x75, 0xcd, 0xf2, 0x7f, 0x86,
	0xde, 0x8a, 0x5e, 0xc3, 0x4d, 0xae, 0x6d, 0x2f, 0xb4, 0xe1, 0x06, 0x8b, 0xfe, 0x38, 0xc3, 0x56,
	0x80, 0x4a, 0x49, 0x15, 0x26, 0x7a, 0x5e, 0xd0, 0xd5, 0x26, 0xe0, 0xb5, 0x9e, 0xaf, 0xaa, 0xd7,
	0x86, 0x2b, 0x43, 0xc4, 0x15, 0xd5, 0x4f, 0x2d, 0xc0, 0x0e, 0x81, 0x8a, 0x0d, 0xad, 0x4a, 0x1a,
	0xb4, 0xb9, 0x67, 0xed, 0x8b, 0x34, 0xf6, 0x5f, 0xc0, 0xa3, 0xf2, 0xfa, 0x33, 0x85, 0xdc, 0x90,
	0xb4, 0x50, 0x1b, 0xf6, 0x04, 0x1a, 0xb6, 0x18, 0x4a, 0xa2, 0x2a, 0xa4, 0xae, 0x84, 0x80, 0x1c,
	0xfc, 0x3f, 0xbd, 0x2a, 0xc4, 0x39, 0x2e, 0xb1, 0x0a, 0xf1, 0x4e, 0x94, 0xb2, 0xf5, 0xad, 0x7d,
	0x00, 0xfb, 0xd1, 0x12, 0x79, 0x9a, 0x67, 0xd5, 0xc3, 0x6a, 0xd2, 0xc3, 0xea, 0x17, 0x78, 0xf9,
	0xb2, 0xfc, 0xdf, 0x3c, 0x60, 0x65, 0x59, 0x5f, 0xa0, 0xf9, 0xcf, 0xd6, 0xe4, 0xff, 0xe2, 0xc1,
	0x7e, 0x99, 0x68, 0x80, 0x3a, 0x93, 0xa9, 0xc6, 0x7f, 0xdc, 0x3d, 0xf6, 0x14, 0x5a, 0x9a, 0x64,
	0x47, 0x49, 0x74, 0x27, 0x8f, 0xd6, 0x5d, 0x69, 0x33, 0x28, 0x9c, 0xec, 0x70, 0x8d, 0xa9, 0xc7,
	0x31, 0x25, 0xd8, 0x0e, 0x4a, 0xd3, 0xff, 0xdd, 0x83, 0x83, 0xf2, 0xd0, 0xa5, 0xd0, 0x66, 0x95,
	0xca, 0x97, 0xd0, 0x29, 0xbf, 0x12, 0x76, 0x22, 0xd7, 0x67, 0xed, 0x5d, 0xfe, 0x2b, 0x50, 0xbb,
	0x59, 0x5b, 0x1d, 0x1e, 0xbd, 0xa9, 0x9e, 0x8a, 0xde, 0x34, 0xc8, 0x9e, 0xd6, 0x07, 0x59, 0x77,
	0xf2, 0xff, 0xb5, 0x9b, 0xca, 0x5b, 0xea, 0x13, 0xee, 0xd7, 0x5a, 0xa7, 0x2f, 0xe5, 0xfc, 0x5d,
	0x76, 0xda, 0x5f, 0xc2, 0xa0, 0x4a, 0x35, 0x5b, 0xf2, 0xe8, 0x5f, 0xbf, 0x47, 0xab, 0x71, 0x83,
	0x2a, 0x11, 0x29, 0x37, 0x18, 0x6a, 0x31, 0x4f, 0xf9, 0xb2, 0xb8, 0xb6, 0xbf, 0xc2, 0xa7, 0x04,
	0x4f, 0xfe, 0x68, 0x40, 0x7f, 0x15, 0x01, 0xd5, 0xb5, 0x88, 0x90, 0xbd, 0xac, 0x48, 0x76, 0x03,
	0x81, 0xbd, 0xb7, 0x76, 0xd7, 0x5b, 0x73, 0x62, 0xb4, 0x89, 0x61, 0xff, 0x5e, 0x3d, 0x94, 0x1b,
	0x0c, 0xb7, 0x42, 0xbd, 0x35, 0x2f, 0xb6, 0x85, 0x3a, 0x83, 0x6e, 0xed, 0x31, 0xb2, 0xc3, 0x35,
	0xcf, 0xea, 0x81, 0x6e, 0x0b, 0x72, 0x51, 0x7d, 0xc9, 0xac, 0xe2, 0xd8, 0x60, 0xec, 0xfe, 0x53,
	0xc6, 0xe5, 0x7f, 0xca, 0xf8, 0xc2, 0xfe, 0xa7, 0x8c, 0x8e, 0xb6, 0xc8, 0xd3, 0xbf, 0xc7, 0x5e,
	0x54, 0xb9, 0x5c, 0xca, 0xf9, 0xad, 0x5c, 0x2a, 0x09, 0x8d, 0x58, 0xb1, 0x45, 0x50, 0x79, 0xfe,
	0x23, 0x8f, 0x9d, 0xc1, 0x83, 0xd2, 0xfb, 0x5b, 0x6e, 0xa2, 0xef, 0x37, 0x66, 0xb2, 0x01, 0xa7,
	0x20, 0xaf, 0xaa, 0xde, 0x15, 0x52, 0x61, 0x8f, 0x6f, 0xd5, 0x5e, 0x97, 0xd0, 0x36, 0x6a, 0x3e,
	0x05, 0xf8, 0x06, 0x95, 0x16, 0x32, 0xb5, 0xf4, 0x6e, 0x4e, 0xc7, 0x05, 0x28, 0x5c, 0xcb, 0xf3,
	0xb3, 0x16, 0xf9, 0x7d, 0xfc, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd2, 0xcc, 0x06, 0xc1, 0x0f,
	0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// InstanceServiceClient is the client API for InstanceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InstanceServiceClient interface {
	InstanceCreate(ctx context.Context, in *InstanceCreateRequest, opts ...grpc.CallOption) (*InstanceResponse, error)
	InstanceDelete(ctx context.Context, in *InstanceDeleteRequest, opts ...grpc.CallOption) (*InstanceResponse, error)
	InstanceGet(ctx context.Context, in *InstanceGetRequest, opts ...grpc.CallOption) (*InstanceResponse, error)
	InstanceList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*InstanceListResponse, error)
	InstanceLog(ctx context.Context, in *InstanceLogRequest, opts ...grpc.CallOption) (InstanceService_InstanceLogClient, error)
	InstanceWatch(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (InstanceService_InstanceWatchClient, error)
	InstanceReplace(ctx context.Context, in *InstanceReplaceRequest, opts ...grpc.CallOption) (*InstanceResponse, error)
	VersionGet(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*VersionResponse, error)
}

type instanceServiceClient struct {
	cc *grpc.ClientConn
}

func NewInstanceServiceClient(cc *grpc.ClientConn) InstanceServiceClient {
	return &instanceServiceClient{cc}
}

func (c *instanceServiceClient) InstanceCreate(ctx context.Context, in *InstanceCreateRequest, opts ...grpc.CallOption) (*InstanceResponse, error) {
	out := new(InstanceResponse)
	err := c.cc.Invoke(ctx, "/imrpc.InstanceService/InstanceCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instanceServiceClient) InstanceDelete(ctx context.Context, in *InstanceDeleteRequest, opts ...grpc.CallOption) (*InstanceResponse, error) {
	out := new(InstanceResponse)
	err := c.cc.Invoke(ctx, "/imrpc.InstanceService/InstanceDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instanceServiceClient) InstanceGet(ctx context.Context, in *InstanceGetRequest, opts ...grpc.CallOption) (*InstanceResponse, error) {
	out := new(InstanceResponse)
	err := c.cc.Invoke(ctx, "/imrpc.InstanceService/InstanceGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instanceServiceClient) InstanceList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*InstanceListResponse, error) {
	out := new(InstanceListResponse)
	err := c.cc.Invoke(ctx, "/imrpc.InstanceService/InstanceList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instanceServiceClient) InstanceLog(ctx context.Context, in *InstanceLogRequest, opts ...grpc.CallOption) (InstanceService_InstanceLogClient, error) {
	stream, err := c.cc.NewStream(ctx, &_InstanceService_serviceDesc.Streams[0], "/imrpc.InstanceService/InstanceLog", opts...)
	if err != nil {
		return nil, err
	}
	x := &instanceServiceInstanceLogClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type InstanceService_InstanceLogClient interface {
	Recv() (*LogResponse, error)
	grpc.ClientStream
}

type instanceServiceInstanceLogClient struct {
	grpc.ClientStream
}

func (x *instanceServiceInstanceLogClient) Recv() (*LogResponse, error) {
	m := new(LogResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *instanceServiceClient) InstanceWatch(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (InstanceService_InstanceWatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_InstanceService_serviceDesc.Streams[1], "/imrpc.InstanceService/InstanceWatch", opts...)
	if err != nil {
		return nil, err
	}
	x := &instanceServiceInstanceWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type InstanceService_InstanceWatchClient interface {
	Recv() (*empty.Empty, error)
	grpc.ClientStream
}

type instanceServiceInstanceWatchClient struct {
	grpc.ClientStream
}

func (x *instanceServiceInstanceWatchClient) Recv() (*empty.Empty, error) {
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *instanceServiceClient) InstanceReplace(ctx context.Context, in *InstanceReplaceRequest, opts ...grpc.CallOption) (*InstanceResponse, error) {
	out := new(InstanceResponse)
	err := c.cc.Invoke(ctx, "/imrpc.InstanceService/InstanceReplace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instanceServiceClient) VersionGet(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, "/imrpc.InstanceService/VersionGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InstanceServiceServer is the server API for InstanceService service.
type InstanceServiceServer interface {
	InstanceCreate(context.Context, *InstanceCreateRequest) (*InstanceResponse, error)
	InstanceDelete(context.Context, *InstanceDeleteRequest) (*InstanceResponse, error)
	InstanceGet(context.Context, *InstanceGetRequest) (*InstanceResponse, error)
	InstanceList(context.Context, *empty.Empty) (*InstanceListResponse, error)
	InstanceLog(*InstanceLogRequest, InstanceService_InstanceLogServer) error
	InstanceWatch(*empty.Empty, InstanceService_InstanceWatchServer) error
	InstanceReplace(context.Context, *InstanceReplaceRequest) (*InstanceResponse, error)
	VersionGet(context.Context, *empty.Empty) (*VersionResponse, error)
}

// UnimplementedInstanceServiceServer can be embedded to have forward compatible implementations.
type UnimplementedInstanceServiceServer struct {
}

func (*UnimplementedInstanceServiceServer) InstanceCreate(ctx context.Context, req *InstanceCreateRequest) (*InstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstanceCreate not implemented")
}
func (*UnimplementedInstanceServiceServer) InstanceDelete(ctx context.Context, req *InstanceDeleteRequest) (*InstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstanceDelete not implemented")
}
func (*UnimplementedInstanceServiceServer) InstanceGet(ctx context.Context, req *InstanceGetRequest) (*InstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstanceGet not implemented")
}
func (*UnimplementedInstanceServiceServer) InstanceList(ctx context.Context, req *empty.Empty) (*InstanceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstanceList not implemented")
}
func (*UnimplementedInstanceServiceServer) InstanceLog(req *InstanceLogRequest, srv InstanceService_InstanceLogServer) error {
	return status.Errorf(codes.Unimplemented, "method InstanceLog not implemented")
}
func (*UnimplementedInstanceServiceServer) InstanceWatch(req *empty.Empty, srv InstanceService_InstanceWatchServer) error {
	return status.Errorf(codes.Unimplemented, "method InstanceWatch not implemented")
}
func (*UnimplementedInstanceServiceServer) InstanceReplace(ctx context.Context, req *InstanceReplaceRequest) (*InstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstanceReplace not implemented")
}
func (*UnimplementedInstanceServiceServer) VersionGet(ctx context.Context, req *empty.Empty) (*VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VersionGet not implemented")
}

func RegisterInstanceServiceServer(s *grpc.Server, srv InstanceServiceServer) {
	s.RegisterService(&_InstanceService_serviceDesc, srv)
}

func _InstanceService_InstanceCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstanceCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstanceServiceServer).InstanceCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imrpc.InstanceService/InstanceCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstanceServiceServer).InstanceCreate(ctx, req.(*InstanceCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstanceService_InstanceDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstanceDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstanceServiceServer).InstanceDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imrpc.InstanceService/InstanceDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstanceServiceServer).InstanceDelete(ctx, req.(*InstanceDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstanceService_InstanceGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstanceGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstanceServiceServer).InstanceGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imrpc.InstanceService/InstanceGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstanceServiceServer).InstanceGet(ctx, req.(*InstanceGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstanceService_InstanceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstanceServiceServer).InstanceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imrpc.InstanceService/InstanceList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstanceServiceServer).InstanceList(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstanceService_InstanceLog_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InstanceLogRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InstanceServiceServer).InstanceLog(m, &instanceServiceInstanceLogServer{stream})
}

type InstanceService_InstanceLogServer interface {
	Send(*LogResponse) error
	grpc.ServerStream
}

type instanceServiceInstanceLogServer struct {
	grpc.ServerStream
}

func (x *instanceServiceInstanceLogServer) Send(m *LogResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _InstanceService_InstanceWatch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InstanceServiceServer).InstanceWatch(m, &instanceServiceInstanceWatchServer{stream})
}

type InstanceService_InstanceWatchServer interface {
	Send(*empty.Empty) error
	grpc.ServerStream
}

type instanceServiceInstanceWatchServer struct {
	grpc.ServerStream
}

func (x *instanceServiceInstanceWatchServer) Send(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func _InstanceService_InstanceReplace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstanceReplaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstanceServiceServer).InstanceReplace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imrpc.InstanceService/InstanceReplace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstanceServiceServer).InstanceReplace(ctx, req.(*InstanceReplaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstanceService_VersionGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstanceServiceServer).VersionGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imrpc.InstanceService/VersionGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstanceServiceServer).VersionGet(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _InstanceService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "imrpc.InstanceService",
	HandlerType: (*InstanceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InstanceCreate",
			Handler:    _InstanceService_InstanceCreate_Handler,
		},
		{
			MethodName: "InstanceDelete",
			Handler:    _InstanceService_InstanceDelete_Handler,
		},
		{
			MethodName: "InstanceGet",
			Handler:    _InstanceService_InstanceGet_Handler,
		},
		{
			MethodName: "InstanceList",
			Handler:    _InstanceService_InstanceList_Handler,
		},
		{
			MethodName: "InstanceReplace",
			Handler:    _InstanceService_InstanceReplace_Handler,
		},
		{
			MethodName: "VersionGet",
			Handler:    _InstanceService_VersionGet_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "InstanceLog",
			Handler:       _InstanceService_InstanceLog_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "InstanceWatch",
			Handler:       _InstanceService_InstanceWatch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "instance.proto",
}
